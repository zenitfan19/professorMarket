@model professorMarketWebUI.Models.TutorFinderModel
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<script>
    function setFilter(group, id, name) {        
        
            switch(group)
            {
                case 'type': 
                    $('#selectedTypeTbx').val(id);     
                    $('.select_type .label').html(name);
                    break;
                case 'subjectType':
                    $.each($('.select_subject .dropdown-item'), function () {                        
                            $(this).removeClass('hidden');
                    });
                    $('#selectedSTypeTbx').val(id);
                    $('.select_sType .label').html(name);                     
                    $.each($('.select_subject .dropdown-item'), function () {
                        if ($(this).data('itemGroupId') != id && id != 0 && $(this).data('itemGroupId') != 0)
                            $(this).addClass('hidden');
                        });
                    
                    break;                
                case 'subject': 
                    $('#selectedSubjectTbx').val(id);
                    $('.select_subject .label').html(name);                  
                    break;
                case 'exp': 
                    $('#selectedExperienceTbx').val(id);
                    $('.select_experience .label').html(name);
                    break;
                default: alert('nobody wins');
        
        }        
            

        
    }

    function setRequestOptions() {
        if ($('#selectedTypeTbx').val() != '0' && $('#selectedSubjectTbx').val() != '0') {
            $('.requestTbx').removeClass('hidden');
            $('.requestBtn').removeClass('hidden');
        } else {
            $('.requestTbx').addClass('hidden');
            $('.requestBtn').addClass('hidden');
        }
    }



   

    $(document).ready(function () {        
        $(document).on('click', '.dropdown-item', function () {
            var filterOption = $(this);
            setFilter(filterOption.data('groupName'), filterOption.data('itemId'), filterOption.data('itemName'));            
        });
   
    });

    function SendFilter() {        
        var res = {
            selectedType: $('#selectedTypeTbx').val(),
            selectedSType: $('#selectedSTypeTbx').val(),
            selectedSubject: $('#selectedSubjectTbx').val(),
            selectedExperience: $('#selectedExperienceTbx').val()

        };
        var str = JSON.stringify(res);
        $.ajax({
            type: 'POST',
            url: '/Student/FindTutors',
            contentType: 'application/json; charset=utf-8',
            data: str,
            success: function (data) {                
                $('#tutorFindResult').html(data);
                setRequestOptions();
            },
            error: function (xhr, str) {

            }
        });
    }

    function ShowTestimonials(id) {
        var res = {
            tutorId: id
        };        
        $.ajax({
            type: 'GET',
            url: '/Tutor/ShowMyTestimonials',            
            data: res,
            success: function (data) {
                $('.modal-body').html(data);
                $('#myModal').modal('show');
            },
            error: function (xhr, str) {

            }
        });
    }

    function SendRequest(id) {
        var res = {
            lessonTypeId: $('#selectedTypeTbx').val(),
            subjectId: $('#selectedSubjectTbx').val(),
            tutorId: id,
            info: $('#requestTxt' + id).val()
        };
        var str = JSON.stringify(res);
        $.ajax({
            type: 'POST',
            url: '/Student/SendRequestToTutor',
            contentType: 'application/json; charset=utf-8',
            data: str,
            success: function (data) {
                $('#requestTxt' + id).val('');
                $('#requestTxt' + id).parent().addClass('hidden');
                $('#requestBtn' + id).addClass('hidden');
                $('#requestRes' + id).removeClass('hidden');
            },
            error: function (xhr, str) {

            }
        });
    }
    
    
</script>

<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Отзывы</h4>
            </div>
            <div class="modal-body">
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>

    </div>
</div>

<div class="col-md-2 search_params">
    <h4>Условия поиска</h4>
    <hr />

    @using (Html.BeginForm("ShowTutors", "Student"))
    {

        @Html.EditorFor(model => model.selectedType, new { htmlAttributes = new { @class = "hidden", @id = "selectedTypeTbx" } })
        @Html.EditorFor(model => model.selectedSType, new { htmlAttributes = new { @class = "hidden", @id = "selectedSTypeTbx" } })
        @Html.EditorFor(model => model.selectedSubject, new { htmlAttributes = new { @class = "hidden", @id = "selectedSubjectTbx" } })
        @Html.EditorFor(model => model.selectedExperience, new { htmlAttributes = new { @class = "hidden", @id = "selectedExperienceTbx" } })

        <div class="btn-group select_type">
            <p class="label label-info">@(Model.selectedType == 0 ? "Не важно" : Model.types.Where(st => st.id == Model.selectedType).First().name)</p>
            <button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Форма занятий <span class="glyphicon glyphicon-chevron-down"></span>
            </button>
            <ul class="dropdown-menu">
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="type" data-item-id="0" data-item-name="Не важно">Не важно</a></li>
                @foreach (var type in Model.types)
                {
                    <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="type" data-item-id="@type.id" data-item-name="@type.name">@type.name</a></li>
                }
            </ul>
        </div>


        <div class="btn-group select_experience">
            <p class="label label-info">@(Model.selectedExperience == 0 ? "Не важно" : Model.selectedExperience.ToString())</p>
            <button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Опыт <span class="glyphicon glyphicon-chevron-down"></span>
            </button>
            <ul class="dropdown-menu">
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="exp" data-item-id="0" data-item-name="Не важно">Не важно</a></li>
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="exp" data-item-id="1" data-item-name="Начинающий специалист">Начинающий</a></li>
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="exp" data-item-id="2" data-item-name="Небольшой опыт">Небольшой опыт</a></li>
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="exp" data-item-id="3" data-item-name="Опытный специалист">Опытный</a></li>
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="exp" data-item-id="4" data-item-name="Профессионал">Профессионал</a></li>
            </ul>
        </div>


        <div class="btn-group select_sType">
            <p class="label label-info">@(Model.selectedSType == 0 ? "Не важно" : Model.sTypes.Where(st => st.id == Model.selectedSType).First().name)</p>
            <button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Группа предметов <span class="glyphicon glyphicon-chevron-down"></span>
            </button>
            <ul class="dropdown-menu">
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="subjectType" data-item-id="0" data-item-name="Не важно">Не важно</a></li>
                @foreach (var type in Model.sTypes)
                {
                    <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="subjectType" data-item-id="@type.id" data-item-name="@type.name">@type.name</a></li>

                }
            </ul>
        </div>


        <div class="btn-group select_subject">
            <p class="label label-info">@(Model.selectedSubject == 0 ? "Не важно" : Model.subjects.Where(s => s.id == Model.selectedSubject).First().name)</p>
            <button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Предмет <span class="glyphicon glyphicon-chevron-down"></span>
            </button>
            <ul class="dropdown-menu">
                <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="subject" data-item-id="0" data-item-name="Не важно" data-item-group-id="0">Не важно</a></li>
                @foreach (var s in Model.subjects)
                {
                    <li><a href="javascript:void(0);" class="dropdown-item" data-group-name="subject" data-item-id="@s.id" data-item-name="@s.name" data-item-group-id="@s.subjectTypeId">@s.name</a></li>

                }
            </ul>
        </div>


        <a class="btn btn-success" onclick="SendFilter();" id="submit_btn">Применить</a>        

    }







</div>

<div class="col-md-9 col-md-offset-1" id="tutorFindResult">
    <div class="alert alert-info" role="alert">
        Чтобы отправить заявку преподавателю, Вам необходимо выбрать предмет и форму проведения занятия!
    </div>
  @{ Html.RenderPartial("ShowTutor", Model.Tutors);
  }

</div>

